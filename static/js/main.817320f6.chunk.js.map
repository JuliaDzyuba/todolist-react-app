{"version":3,"sources":["components/TodoList/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoList","props","className","style","completed","textDecoration","task","type","defaultChecked","onChange","title","onClick","deleteTask","App","useState","setTask","JSON","parse","localStorage","getItem","allTasks","setTaskList","setItem","stringify","inputRef","React","createRef","Date","timer","setTimer","useEffect","setInterval","weekDay","dayNow","toLocaleDateString","getDay","toLocaleTimeString","map","item","index","key","id","text","arr","filter","indexOf","activeTasks","doneTasks","final","handleChange","ref","current","value","newTask","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.817320f6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ToDoList.scss';\r\n\r\nconst ToDoList = props => {\r\n// console.log(props.task);\r\n// console.log(props.completed);\r\nconst doneStyle = {\r\n  textDecoration: 'line-through'\r\n}\r\n  return (\r\n    <div className=\"todo-item\">\r\n      <p \r\n        className=\"task\" \r\n        style={props.completed === true ? doneStyle : {}}\r\n      >{props.task}</p>\r\n      <div className=\"todo-btns\">\r\n        <input \r\n          type=\"checkbox\" \r\n          defaultChecked={props.completed}\r\n          onChange={props.onChange}\r\n        />\r\n        <button \r\n          className=\"del-btn\" \r\n          title=\"delete task\" \r\n          onClick={props.deleteTask}\r\n        >✘</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ToDoList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// <input type=\"checkbox\" defaultChecked={props.completed}/>\r\n\r\n\r\n\r\n// const list = props.allTasks.map( (item, index) =>  <p className=\"task\" key={index}>{item}</p>);\r\n  // console.log(list);\r\n\r\n  /*\r\n   <ToDoList\r\n          task={item.task}\r\n          completed = {item.completed} \r\n          handleChange={ () => this.handleChange(item.id)} \r\n        /> \r\n  */","import React, { useState, useEffect } from 'react';\nimport ToDoList from './components/TodoList/ToDoList.js'; \nimport './App.css';\n\nconst App = () => {\n  const [task, setTask] = useState('');\n  const [allTasks, setTaskList] = useState(JSON.parse(localStorage.getItem('tasksList')) || []);\n\n  localStorage.setItem('tasksList', JSON.stringify(allTasks));\n\n  const inputRef = React.createRef();\n  const getInputValue =() =>  {\n    setTask(inputRef.current.value); \n  }\n\n  const addTask = () =>{\n    \n    if(task && task !=='') {\n      const newTask = {\n        id: Math.floor(Math.random() * 10000000),\n        completed: false,\n        text: task\n      };\n\n      inputRef.current.value = '';\n      \n      setTaskList([newTask, ...allTasks]);\n      localStorage.setItem('tasksList', JSON.stringify(allTasks));\n    }\n    setTask(''); \n  }\n\n  const deleteTask = (id) => {\n    const arr = allTasks.filter( (item) => item.id !== id );\n    setTaskList( [...arr]);\n    localStorage.setItem('tasksList', JSON.stringify(allTasks));\n  }\n\n  const handleChange = id => {\n    const index = allTasks.map( item => item.id).indexOf(id);\n    allTasks[index].completed = !allTasks[index].completed;\n    let activeTasks = allTasks.filter( item => item.completed === false);\n    let doneTasks = allTasks.filter( item => item.completed === true);\n    let final = [...activeTasks, ...doneTasks];\n\n    setTaskList( [...final]);\n    \n    localStorage.setItem('tasksList', JSON.stringify(allTasks));\n  }\n\n  \n  const [timer, setTimer] = useState(new Date());\n\n  const tick = () => {\n    setTimer(new Date());\n  }\n\n  useEffect ( () => {\n    setInterval( () => tick(), 1000);    \n  }, [])\n\n  let dayNow = timer.toLocaleDateString();\n\n  let weekDay;\n  switch (new Date().getDay()) {\n    case 0: \n      weekDay = 'Воскресенье';\n      break;\n    case 1: \n      weekDay = 'Понедельник';\n      break;\n    case 2: \n      weekDay = 'Вторник';\n      break;\n    case 3: \n      weekDay = 'Среда';\n      break;\n    case 4: \n      weekDay = 'Четверг';\n      break;\n    case 5: \n      weekDay = 'Пятница';\n      break;\n    case 6: \n      weekDay = 'Суббота';\n      break;\n    default: break;\n  }\n  \n\n\n\n  return (\n    <div className=\"App\">\n      <h1>СПИСОК ДЕЛ</h1>\n      <div className=\"todo-date\">\n        <span>{weekDay}</span> <span>{dayNow}</span> <span>{timer.toLocaleTimeString()}</span>\n      </div>\n      <div className=\"todo-list\">\n        {allTasks.map( (item, index) => {\n            return (\n              <ToDoList \n                key={item.id} \n                task={item.text}\n                completed={item.completed} \n                deleteTask={() => deleteTask(item.id)}\n                onChange={()=> handleChange(item.id)} \n              />\n            )\n          })\n        }\n      </div>\n      <div className=\"todo-generator\">\n        <input \n          type=\"text\"\n          ref={inputRef}\n          onChange={getInputValue}\n        />\n        <button\n          title=\"add new task\"\n          onClick={addTask}        \n        >Add task</button>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}